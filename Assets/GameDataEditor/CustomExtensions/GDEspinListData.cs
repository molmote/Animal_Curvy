// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
// 
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEspinListData : IGDEData
    {
        private static string indexKey = "index";
		private int _index;
        public int index
        {
            get { return _index; }
            set {
                if (_index != value)
                {
                    _index = value;
                    GDEDataManager.SetInt(_key+"_"+indexKey, _index);
                }
            }
        }

        private static string weightKey = "weight";
		private int _weight;
        public int weight
        {
            get { return _weight; }
            set {
                if (_weight != value)
                {
                    _weight = value;
                    GDEDataManager.SetInt(_key+"_"+weightKey, _weight);
                }
            }
        }

        private static string weight_bonusKey = "weight_bonus";
		private int _weight_bonus;
        public int weight_bonus
        {
            get { return _weight_bonus; }
            set {
                if (_weight_bonus != value)
                {
                    _weight_bonus = value;
                    GDEDataManager.SetInt(_key+"_"+weight_bonusKey, _weight_bonus);
                }
            }
        }

        private static string round1Key = "round1";
		private float _round1;
        public float round1
        {
            get { return _round1; }
            set {
                if (_round1 != value)
                {
                    _round1 = value;
                    GDEDataManager.SetFloat(_key+"_"+round1Key, _round1);
                }
            }
        }

        private static string round2Key = "round2";
		private float _round2;
        public float round2
        {
            get { return _round2; }
            set {
                if (_round2 != value)
                {
                    _round2 = value;
                    GDEDataManager.SetFloat(_key+"_"+round2Key, _round2);
                }
            }
        }

        private static string round3Key = "round3";
		private float _round3;
        public float round3
        {
            get { return _round3; }
            set {
                if (_round3 != value)
                {
                    _round3 = value;
                    GDEDataManager.SetFloat(_key+"_"+round3Key, _round3);
                }
            }
        }

        private static string round4Key = "round4";
		private float _round4;
        public float round4
        {
            get { return _round4; }
            set {
                if (_round4 != value)
                {
                    _round4 = value;
                    GDEDataManager.SetFloat(_key+"_"+round4Key, _round4);
                }
            }
        }

        private static string rewardKey = "reward";
		private string _reward;
        public REWARD_LIST reward
        {
            get { return (REWARD_LIST) Enum.Parse(typeof(REWARD_LIST), _reward); }
        }

        private static string reward_bonusKey = "reward_bonus";
		private string _reward_bonus;
        public REWARD_LIST reward_bonus
        {
            get { return (REWARD_LIST) Enum.Parse(typeof(REWARD_LIST), _reward_bonus); }
        }

        public GDEspinListData()
		{
			_key = string.Empty;
		}

		public GDEspinListData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;
			
			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(indexKey, out _index);
                dict.TryGetInt(weightKey, out _weight);
                dict.TryGetInt(weight_bonusKey, out _weight_bonus);
                dict.TryGetFloat(round1Key, out _round1);
                dict.TryGetFloat(round2Key, out _round2);
                dict.TryGetFloat(round3Key, out _round3);
                dict.TryGetFloat(round4Key, out _round4);
                dict.TryGetString(rewardKey, out _reward);
                dict.TryGetString(reward_bonusKey, out _reward_bonus);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _index = GDEDataManager.GetInt(_key+"_"+indexKey, _index);
            _weight = GDEDataManager.GetInt(_key+"_"+weightKey, _weight);
            _weight_bonus = GDEDataManager.GetInt(_key+"_"+weight_bonusKey, _weight_bonus);
            _round1 = GDEDataManager.GetFloat(_key+"_"+round1Key, _round1);
            _round2 = GDEDataManager.GetFloat(_key+"_"+round2Key, _round2);
            _round3 = GDEDataManager.GetFloat(_key+"_"+round3Key, _round3);
            _round4 = GDEDataManager.GetFloat(_key+"_"+round4Key, _round4);
            _reward = GDEDataManager.GetString(_key+"_"+rewardKey, _reward);
            _reward_bonus = GDEDataManager.GetString(_key+"_"+reward_bonusKey, _reward_bonus);
         }

        public void Reset_index()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(indexKey, out _index);
        }

        public void Reset_weight()
        {
            GDEDataManager.ResetToDefault(_key, weightKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(weightKey, out _weight);
        }

        public void Reset_weight_bonus()
        {
            GDEDataManager.ResetToDefault(_key, weight_bonusKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(weight_bonusKey, out _weight_bonus);
        }

        public void Reset_round1()
        {
            GDEDataManager.ResetToDefault(_key, round1Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(round1Key, out _round1);
        }

        public void Reset_round2()
        {
            GDEDataManager.ResetToDefault(_key, round2Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(round2Key, out _round2);
        }

        public void Reset_round3()
        {
            GDEDataManager.ResetToDefault(_key, round3Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(round3Key, out _round3);
        }

        public void Reset_round4()
        {
            GDEDataManager.ResetToDefault(_key, round4Key);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(round4Key, out _round4);
        }

        public void Reset_reward()
        {
            GDEDataManager.ResetToDefault(_key, rewardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(rewardKey, out _reward);
        }

        public void Reset_reward_bonus()
        {
            GDEDataManager.ResetToDefault(_key, reward_bonusKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(reward_bonusKey, out _reward_bonus);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);
            GDEDataManager.ResetToDefault(_key, rewardKey);
            GDEDataManager.ResetToDefault(_key, reward_bonusKey);
            GDEDataManager.ResetToDefault(_key, round1Key);
            GDEDataManager.ResetToDefault(_key, round2Key);
            GDEDataManager.ResetToDefault(_key, round3Key);
            GDEDataManager.ResetToDefault(_key, round4Key);
            GDEDataManager.ResetToDefault(_key, weightKey);
            GDEDataManager.ResetToDefault(_key, weight_bonusKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
