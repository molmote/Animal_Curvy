// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
// 
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEbuffListData : IGDEData
    {
        private static string indexKey = "index";
		private int _index;
        public int index
        {
            get { return _index; }
            set {
                if (_index != value)
                {
                    _index = value;
                    GDEDataManager.SetInt(_key+"_"+indexKey, _index);
                }
            }
        }

        private static string normalAmountKey = "normalAmount";
		private int _normalAmount;
        public int normalAmount
        {
            get { return _normalAmount; }
            set {
                if (_normalAmount != value)
                {
                    _normalAmount = value;
                    GDEDataManager.SetInt(_key+"_"+normalAmountKey, _normalAmount);
                }
            }
        }

        private static string normalChanceKey = "normalChance";
		private int _normalChance;
        public int normalChance
        {
            get { return _normalChance; }
            set {
                if (_normalChance != value)
                {
                    _normalChance = value;
                    GDEDataManager.SetInt(_key+"_"+normalChanceKey, _normalChance);
                }
            }
        }

        private static string megaAmountKey = "megaAmount";
		private int _megaAmount;
        public int megaAmount
        {
            get { return _megaAmount; }
            set {
                if (_megaAmount != value)
                {
                    _megaAmount = value;
                    GDEDataManager.SetInt(_key+"_"+megaAmountKey, _megaAmount);
                }
            }
        }

        private static string megaChanceKey = "megaChance";
		private int _megaChance;
        public int megaChance
        {
            get { return _megaChance; }
            set {
                if (_megaChance != value)
                {
                    _megaChance = value;
                    GDEDataManager.SetInt(_key+"_"+megaChanceKey, _megaChance);
                }
            }
        }

        private static string effectKey = "effect";
		private float _effect;
        public float effect
        {
            get { return _effect; }
            set {
                if (_effect != value)
                {
                    _effect = value;
                    GDEDataManager.SetFloat(_key+"_"+effectKey, _effect);
                }
            }
        }

        private static string nameKey = "name";
		private string _name;
        public string name
        {
            get { return _name; }
            set {
                if (_name != value)
                {
                    _name = value;
                    GDEDataManager.SetString(_key+"_"+nameKey, _name);
                }
            }
        }

        private static string typeKey = "type";
		private string _type;
        public string type
        {
            get { return _type; }
            set {
                if (_type != value)
                {
                    _type = value;
                    GDEDataManager.SetString(_key+"_"+typeKey, _type);
                }
            }
        }

        public GDEbuffListData()
		{
			_key = string.Empty;
		}

		public GDEbuffListData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;
			
			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(indexKey, out _index);
                dict.TryGetInt(normalAmountKey, out _normalAmount);
                dict.TryGetInt(normalChanceKey, out _normalChance);
                dict.TryGetInt(megaAmountKey, out _megaAmount);
                dict.TryGetInt(megaChanceKey, out _megaChance);
                dict.TryGetFloat(effectKey, out _effect);
                dict.TryGetString(nameKey, out _name);
                dict.TryGetString(typeKey, out _type);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _index = GDEDataManager.GetInt(_key+"_"+indexKey, _index);
            _normalAmount = GDEDataManager.GetInt(_key+"_"+normalAmountKey, _normalAmount);
            _normalChance = GDEDataManager.GetInt(_key+"_"+normalChanceKey, _normalChance);
            _megaAmount = GDEDataManager.GetInt(_key+"_"+megaAmountKey, _megaAmount);
            _megaChance = GDEDataManager.GetInt(_key+"_"+megaChanceKey, _megaChance);
            _effect = GDEDataManager.GetFloat(_key+"_"+effectKey, _effect);
            _name = GDEDataManager.GetString(_key+"_"+nameKey, _name);
            _type = GDEDataManager.GetString(_key+"_"+typeKey, _type);
         }

        public void Reset_index()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(indexKey, out _index);
        }

        public void Reset_normalAmount()
        {
            GDEDataManager.ResetToDefault(_key, normalAmountKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(normalAmountKey, out _normalAmount);
        }

        public void Reset_normalChance()
        {
            GDEDataManager.ResetToDefault(_key, normalChanceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(normalChanceKey, out _normalChance);
        }

        public void Reset_megaAmount()
        {
            GDEDataManager.ResetToDefault(_key, megaAmountKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(megaAmountKey, out _megaAmount);
        }

        public void Reset_megaChance()
        {
            GDEDataManager.ResetToDefault(_key, megaChanceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(megaChanceKey, out _megaChance);
        }

        public void Reset_effect()
        {
            GDEDataManager.ResetToDefault(_key, effectKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(effectKey, out _effect);
        }

        public void Reset_name()
        {
            GDEDataManager.ResetToDefault(_key, nameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(nameKey, out _name);
        }

        public void Reset_type()
        {
            GDEDataManager.ResetToDefault(_key, typeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(typeKey, out _type);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, indexKey);
            GDEDataManager.ResetToDefault(_key, nameKey);
            GDEDataManager.ResetToDefault(_key, normalAmountKey);
            GDEDataManager.ResetToDefault(_key, normalChanceKey);
            GDEDataManager.ResetToDefault(_key, megaAmountKey);
            GDEDataManager.ResetToDefault(_key, megaChanceKey);
            GDEDataManager.ResetToDefault(_key, typeKey);
            GDEDataManager.ResetToDefault(_key, effectKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
